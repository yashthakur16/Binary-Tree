#include<iostream>
#include<queue>
using namespace std;

class node
{
    public:

    int data;
    node* left;
    node* right;

    node(int data)
    {
        this->data=data;
        this->left=NULL;
        this->right=NULL;
    }
};

node* buildtree(node* root)
{
    cout<<"Enter the data : "<<endl;
    int data;
    cin>>data;
    root=new node(data);

    if(data==-1)
    {
        return NULL;
    }
    cout<<"Enter the data for left of "<<data<<endl;
    root->left=buildtree(root->left);
    cout<<"Enter the data for right of "<<data<<endl;
    root->right=buildtree(root->right);

    return root;

}

node* buildtreefromlevel(node *root)
{
    queue<node*> q;
    cout<<"Enter the data : "<<endl;
    int data;
    cin>>data;
    root= new node(data);
    q.push(root);

    while(!q.empty())
    {
        node *temp=q.front();
        q.pop();
        cout<<"Enter the data for left of "<<temp->data<<endl;
        int leftdata;
        cin>>leftdata;
        if(leftdata !=-1)
        {
            temp->left=new node(leftdata);
            q.push(temp->left);
        }
        cout<<"Enter the data for right of "<<temp->data<<endl;
        int rightdata;
        cin>>rightdata;
        if(rightdata !=-1)
        {
            temp->right=new node(rightdata);
            q.push(temp->right);
        }
    }

    return root;
}

void levelordertraversal(node* root)
{
    queue<node*> q;
    q.push(root);
    q.push(NULL);

    while(!q.empty())
    {
        node *temp=q.front();
        
        q.pop();

        if(temp==NULL)
        {
            cout<<endl;
            if(!q.empty())
            {
                q.push(NULL);
            }
        }
        else
        {
            cout<<temp->data<<" ";
            if(temp->left)
            {
                q.push(temp->left);
            }
            if(temp->right)
            {
                q.push(temp->right);
            }
        }

        
    }
}

void inorder(node *root)
{
    if(root==NULL)
    {
        return ;
    }
    inorder(root->left);
    cout<<root->data<<" ";
    inorder(root->right);

    return ;
}

void preorder(node *root)
{
    if(root==NULL)
    {
        return ;
    }
    cout<<root->data<<" ";
    preorder(root->left);
    preorder(root->right);

    return ;
}

void postorder(node *root)
{
    if(root==NULL)
    {
        return ;
    }
    postorder(root->left);
    postorder(root->right);
    cout<<root->data<<" ";

    return ;
}


int main()
{
    node* root=NULL;

    //root=buildtree(root);

 // 5 2 8 -1 -1 7 -1 -1 3 6 -1 -1 -1
   root=buildtreefromlevel(root);

    levelordertraversal(root);

    cout<<endl;

    inorder(root);

    cout<<endl;

    preorder(root);
    cout<<endl;

    postorder(root);


}
