#include<iostream>
#include<queue>
using namespace std;

class node
{
    public:
    int data;
    node* left;
    node* right;

    node(int data)
    {
        this->data=data;
        this->left=left;
        this->right=right;
    }
};

node* buildtree(node *root)
{
    cout<<"Enter the data : "<<endl;
    int data;
    cin>>data;
    root= new node(data);

    if(data==-1)
    {
        return NULL;
    }

    cout<<"Enter the data for left child of : "<<data<<endl;
    root->left=buildtree(root->left);

    cout<<"Enter the data for right child of : "<<data<<endl;
    root->right=buildtree(root->right);

    return root;

}

node* buildtreebylevel(node* root)
{
    queue<node*> q;
    cout<<"Enter the data : "<<endl;
    int data;
    cin>>data;
    root=new node(data);
    q.push(root);


    while(!q.empty())
    {
        node* temp=q.front();
        q.pop();

        cout<<"Enter the data for left child of : "<<temp->data<<endl;
        int leftdata;
        cin>>leftdata;
        if(leftdata !=-1)
        {
            temp->left=new node (leftdata);
            q.push(temp->left);
        }

        cout<<"Enter the data for right child of : "<<temp->data<<endl;
        int rightdata;
        cin>>rightdata;
        if(rightdata !=-1)
        {
            temp->right=new node (rightdata);
            q.push(temp->right);
        }
    
    }
    return root;

}


void bfstraversal(node* root)
{
    queue<node*> q;
    q.push(root);
    q.push(NULL);
    

    while(!q.empty())
    {
        node* temp=q.front();
        q.pop();
    
        if(temp==NULL)
        {
            cout<<endl;
            if(!q.empty())
            {
                q.push(NULL);
            }
        }
        else
        {
            cout<<temp->data<<" ";

            if(temp->left)
            {
                q.push(temp->left);
            }
            
            if(temp->right)
            {
                q.push(temp->right);
            }
            
        }
        
    }
   
}

void inordertraversal(node *root)
{
    
    if(root==NULL)
    {
        return ;
    }
    inordertraversal(root->left);
    cout<<root->data<<" ";
    inordertraversal(root->right);

    return ;

}

int main()
{
    node *root=NULL;
    //root=buildtree(root);

    root=buildtreebylevel(root);
    inordertraversal(root);
    cout<<endl;
    bfstraversal(root);

    // 4 2 8 -1 -1 3 -1 -1 7 -1 9 -1 -1
    // 4 2 7 8 3 -1 9 -1 -1 -1 -1 -1 -1
}
